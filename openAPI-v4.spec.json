{
  "openapi": "3.0.1",
  "info": {
    "title": "Register a food business collections",
    "version": "v3.0"
  },
  "servers": [
    {
      "url": "https://fsa-rof-gateway.azure-api.net/registrations/v2"
    }
  ],
  "paths": {
    "/unified": {
      "get": {
        "summary": "Get registrations for Unified View.",
        "description": "Returns registrations from all local authorities for Unified View. Results are filtered according to the supplied date/time range.",
        "operationId": "get-registrations-for-unified-view",
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). Filter registrations to those created/updated after an ISO formatted UTC date-time e.g. 2019-04-29T16:01:12Z.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2019-04-29T16:01:12.0000000+00:00"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). Filter registrations to those created/updated before an ISO formatted UTC date-time e.g. 2019-04-30T16:01:12Z.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2019-04-29T16:01:12.0000000+00:00"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfRegistrations"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid options."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/{subscriber}": {
      "get": {
        "summary": "Get registrations for local authority or MIS provider.",
        "description": "Returns registrations for the supplied local authority or MIS provider. By default, results are filtered to exclude data marked as collected.",
        "operationId": "get-registrations-for-local-authority",
        "parameters": [
          {
            "name": "subscriber",
            "in": "path",
            "description": "The local authority or MIS provider name.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "arcus"
          },
          {
            "name": "local-authorities",
            "in": "query",
            "description": "The local authorities for which to return data, if different to the organisation supplied in the subscriber parameter.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "cardiff"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Extra fields to return as part of the response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "establishment"
          },
          {
            "name": "after",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). Filter registrations to those created/updated after an ISO formatted UTC date-time e.g. 2019-04-29T16:01:12Z.",
            "schema": {
              "type": "string"
            },
            "example": "2019-04-29T16:01:12.0000000+00:00"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Format - date-time (as date-time in RFC3339). Filter registrations to those created/updated before an ISO formatted UTC date-time e.g. 2019-04-30T16:01:12Z.",
            "schema": {
              "type": "string"
            },
            "example": "2019-04-29T16:01:12.0000000+00:00"
          },
          {
            "name": "new",
            "in": "query",
            "description": "Filter registrations to those not yet marked as collected.",
            "schema": {
              "enum": [true, false],
              "type": "boolean",
              "default": true
            },
            "example": "True"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfRegistrations"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid options."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "summary": "Submit a single registration.",
        "description": "Submits a single registration.",
        "operationId": "submit-single-registration-for-local-authority",
        "parameters": [
          {
            "name": "subscriber",
            "in": "path",
            "description": "The local authority or MIS provider name.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "arcus"
          },
          {
            "name": "local-authority",
            "in": "query",
            "description": "The local authority for which to submit data, if different to the organisation supplied in the subscriber parameter.",
            "schema": {
              "type": "string"
            },
            "example": "cardiff"
          }
        ],
        "requestBody": {
          "description": "The registration details to submit.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectRegistration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fsa_rn": {
                      "description": "The registration application reference.",
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "fsa_rn": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/{subscriber}/{fsa_rn}": {
      "get": {
        "summary": "Get a single registration in full.",
        "description": "Returns a single registration in full from the supplied registration application reference.",
        "operationId": "get-single-registration-for-local-authority",
        "parameters": [
          {
            "name": "subscriber",
            "in": "path",
            "description": "The local authority or MIS provider name.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "arcus"
          },
          {
            "name": "fsa_rn",
            "in": "path",
            "description": "The registration application reference.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "PQQK8Q-SN9N8C-AAAAA"
          },
          {
            "name": "local-authority",
            "in": "query",
            "description": "The local authority for which to return data, if different to the organisation supplied in the subscriber parameter.",
            "schema": {
              "type": "string"
            },
            "example": "cardiff"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid options."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "put": {
        "summary": "Update the collected status of a single registration.",
        "description": "Updates a single registration according to the supplied registration application reference and collection status.",
        "operationId": "update-single-registration-for-local-authority",
        "parameters": [
          {
            "name": "subscriber",
            "in": "path",
            "description": "The local authority or MIS provider name.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "arcus"
          },
          {
            "name": "fsa_rn",
            "in": "path",
            "description": "The registration application reference.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "PQQK8Q-SN9N8C-AAAAA"
          },
          {
            "name": "local-authority",
            "in": "query",
            "description": "The local authority for which to update data, if different to the organisation supplied in the subscriber parameter.",
            "schema": {
              "type": "string"
            },
            "example": "cardiff"
          }
        ],
        "requestBody": {
          "description": "The collection status with which to update the registration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Collected"
              },
              "example": {
                "collected": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "collected": {
                      "description": "The collection status to which the registration was updated.",
                      "type": "boolean"
                    },
                    "fsa_rn": {
                      "description": "The registration application reference.",
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "collected": true,
                  "fsa_rn": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid options."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ArrayOfRegistrations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Registration"
        }
      },
      "Registration": {
        "type": "object",
        "properties": {
          "fsa_rn": {
            "$ref": "#/components/schemas/fsa_rn"
          },
          "council": {
            "type": "string",
            "description": "The full name of the local authority."
          },
          "competent_authority_id": {
            "type": "integer",
            "description": "The unique id for the local authority."
          },
          "local_council_url": {
            "type": "string",
            "description": "The unique url for the local authority."
          },
          "collected": {
            "type": "boolean",
            "description": "Flag indicating whether this registration has been collected by the local authority or not."
          },
          "collected_at": {
            "type": "string",
            "description": "The date and time that the registration was collected."
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time that the registration was created."
          },
          "updatedAt": {
            "type": "string",
            "description": "The date and time that the registration was updated."
          },
          "establishment": {
            "$ref": "#/components/schemas/Establishment"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "DirectRegistration": {
        "required": ["establishment"],
        "type": "object",
        "properties": {
          "fsa_rn": {
            "$ref": "#/components/schemas/fsa_rn"
          },
          "establishment": {
            "$ref": "#/components/schemas/Establishment"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "fsa_rn": {
        "maximum": 20,
        "minimum": 20,
        "type": "string",
        "description": "The unique registration application reference that identifies this registration."
      },
      "Establishment": {
        "required": [
          "establishment_trading_name",
          "establishment_primary_number",
          "establishment_email",
          "establishment_opening_date",
          "operator",
          "premise",
          "activities"
        ],
        "type": "object",
        "properties": {
          "establishment_trading_name": {
            "maximum": 255,
            "type": "string"
          },
          "establishment_primary_number": {
            "maximum": 20,
            "minimum": 5,
            "type": "string",
            "description": "Numeric string. Blank spaces and + allowed."
          },
          "establishment_secondary_number": {
            "maximum": 20,
            "minimum": 5,
            "type": "string",
            "description": "Numeric string. Blank spaces and + allowed."
          },
          "establishment_email": {
            "maximum": 255,
            "type": "string",
            "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isEmail."
          },
          "establishment_web_address": {
            "maximum": 255,
            "type": "string",
            "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isURL."
          },
          "establishment_opening_date": {
            "type": "string",
            "description": "Uses YYYY-MM-DD [npm Validator](https://www.npmjs.com/package/validator) isISO8601."
          },
          "operator": {
            "$ref": "#/components/schemas/Operator"
          },
          "premise": {
            "$ref": "#/components/schemas/Premise"
          },
          "activities": {
            "$ref": "#/components/schemas/Activities"
          }
        }
      },
      "Operator": {
        "required": [
          "operator_address_line_1",
          "operator_type",
          "operator_town",
          "operator_postcode",
          "operator_birthdate"
        ],
        "type": "object",
        "properties": {
          "operator_first_name": {
            "maximum": 255,
            "type": "string",
            "description": "Required if operator_type is 'SOLETRADER, 'PARTNERSHIP', or 'PERSON'."
          },
          "operator_last_name": {
            "maximum": 255,
            "type": "string",
            "description": "Required if operator_type is 'SOLETRADER, 'PARTNERSHIP', or 'PERSON'."
          },
          "operator_postcode": {
            "type": "string",
            "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isPostalCode (GB)."
          },
          "operator_birthdate": {
            "type": "string",
            "description": "Uses YYYY-MM-DD [npm Validator](https://www.npmjs.com/package/validator) isISO8601."
          },
          "operator_uprn": {
            "maximum": 12,
            "type": "string",
            "description": "Unique Property Reference Number."
          },
          "operator_address_line_1": {
            "maximum": 255,
            "type": "string",
            "description": "String."
          },
          "operator_address_line_2": {
            "maximum": 255,
            "type": "string",
            "description": "String."
          },
          "operator_address_line_3": {
            "maximum": 255,
            "type": "string",
            "description": "String."
          },
          "operator_town": {
            "maximum": 255,
            "type": "string",
            "description": "String."
          },
          "operator_primary_number": {
            "maximum": 20,
            "minimum": 5,
            "type": "string",
            "description": "Numeric string. Blank spaces and + allowed. Required if operator_type is 'SOLETRADER, 'PARTNERSHIP', or 'PERSON'."
          },
          "operator_secondary_number": {
            "maximum": 20,
            "minimum": 5,
            "type": "string",
            "description": "Numeric string. Blank spaces and + allowed."
          },
          "operator_email": {
            "maximum": 255,
            "type": "string",
            "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isEmail. Required if operator_type is 'SOLETRADER, 'PARTNERSHIP', or 'PERSON'."
          },
          "contact_representative_name": {
            "maximum": 255,
            "type": "string",
            "description": "Required if operator_type is 'COMPANY' or 'CHARITY'."
          },
          "contact_representative_role": {
            "maximum": 255,
            "type": "string",
            "description": "String - Required if operator_type is 'COMPANY' or 'CHARITY'."
          },
          "contact_representative_number": {
            "maximum": 20,
            "minimum": 5,
            "type": "string",
            "description": "Numeric string. Blank spaces and + allowed - Required if operator_type is 'COMPANY' or 'CHARITY'."
          },
          "contact_representative_email": {
            "maximum": 255,
            "type": "string",
            "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isEmail - Required if operator_type is 'COMPANY' or 'CHARITY'."
          },
          "operator_type": {
            "type": "string",
            "enum": ["SOLETRADER", "PARTNERSHIP", "PERSON", "COMPANY", "CHARITY"]
          },
          "operator_company_name": {
            "maximum": 255,
            "type": "string",
            "description": "Required if operator_type is 'COMPANY'."
          },
          "operator_company_house_number": {
            "maximum": 8,
            "minimum": 8,
            "type": "string",
            "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isAlphanumeric (GB) - Required if operator_type is 'COMPANY'."
          },
          "operator_charity_name": {
            "maximum": 255,
            "type": "string",
            "description": "Required if operator_type is 'CHARITY'."
          },
          "operator_charity_number": {
            "maximum": 8,
            "minimum": 8,
            "type": "string",
            "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isAlphanumeric (GB), allows ''-'' -  Required if operator_type is 'CHARITY'."
          },
          "partners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Partner"
            }
          }
        }
      },
      "Partner": {
        "required": ["partner_name", "partner_is_primary_contact"],
        "type": "object",
        "properties": {
          "partner_name": {
            "maximum": 255,
            "type": "string",
            "description": "Required if operator_type is 'Partnership'."
          },
          "partner_is_primary_contact": {
            "type": "boolean",
            "description": "Flag indicating whether the partner is the primary contact."
          }
        }
      },
      "Premise": {
        "required": [
          "establishment_postcode",
          "establishment_address_line_1",
          "establishment_type",
          "establishment_town"
        ],
        "type": "object",
        "properties": {
          "establishment_postcode": {
            "type": "string",
            "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isPostalCode (GB)."
          },
          "establishment_uprn": {
            "maximum": 12,
            "type": "string",
            "description": "Unique Property Reference Number."
          },
          "establishment_address_line_1": {
            "maximum": 255,
            "type": "string",
            "description": "String."
          },
          "establishment_address_line_2": {
            "maximum": 255,
            "type": "string",
            "description": "String."
          },
          "establishment_address_line_3": {
            "maximum": 255,
            "type": "string",
            "description": "String."
          },
          "establishment_town": {
            "maximum": 255,
            "type": "string",
            "description": "String."
          },
          "establishment_type": {
            "type": "string",
            "enum": ["COMMERCIAL", "MOBILE", "DOMESTIC"]
          }
        }
      },
      "Activities": {
        "required": [
          "business_type",
          "business_scale",
          "food_type",
          "processing_activities",
          "water_supply"
        ],
        "type": "object",
        "properties": {
          "customer_type": {
            "type": "string",
            "enum": ["OTHER_BUSINESSES", "END_CONSUMER", "BOTH"]
          },
          "business_type": {
            "type": "string",
            "description": "Predetermined values, see https://data.food.gov.uk/codes/business/rafb/establishment-type for full business type list."
          },
          "business_type_search_term": {
            "type": "string"
          },
          "import_export_activities": {
            "type": "string",
            "enum": ["IMPORT", "EXPORT", "BOTH", "NONE"]
          },
          "business_scale": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LOCAL",
                "NATIONAL",
                "EXPORT",
                "ONLINE",
                "FBO",
                "SENIOR_YOUTH",
                "HEALTHCARE",
                "NONE",
                "ALL"
              ]
            }
          },
          "food_type": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["RAWMEAT", "READY_TO_EAT", "COOKED_OR_REHEATED", "IMPORTED", "NONE", "ALL"]
            }
          },
          "processing_activities": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VACUUM_PACKING",
                "SOUS_VIDE",
                "FERMENTING_OR_CURING",
                "PASTEURISING",
                "ANIMAL_UNCOOKED",
                "REWRAPPING_OR_RELABELLING",
                "NONE",
                "DONT_KNOW"
              ]
            }
          },
          "water_supply": {
            "type": "string",
            "enum": ["PUBLIC", "PRIVATE", "BOTH"]
          },
          "business_other_details": {
            "maximum": 1500,
            "type": "string"
          },
          "opening_days_irregular": {
            "maximum": 1500,
            "type": "string"
          },
          "opening_day_monday": {
            "type": "boolean",
            "description": "Required if opening_days_irregular not populated"
          },
          "opening_day_tuesday": {
            "type": "boolean",
            "description": "Required if opening_days_irregular not populated"
          },
          "opening_day_wednesday": {
            "type": "boolean",
            "description": "Required if opening_days_irregular not populated"
          },
          "opening_day_thursday": {
            "type": "boolean",
            "description": "Required if opening_days_irregular not populated"
          },
          "opening_day_friday": {
            "type": "boolean",
            "description": "Required if opening_days_irregular not populated"
          },
          "opening_day_saturday": {
            "type": "boolean",
            "description": "Required if opening_days_irregular not populated"
          },
          "opening_day_sunday": {
            "type": "boolean",
            "description": "Required if opening_days_irregular not populated"
          },
          "opening_hours_monday": {
            "maximum": 50,
            "type": "string",
            "description": "Required if 'opening_day_monday' is true."
          },
          "opening_hours_tuesday": {
            "maximum": 50,
            "type": "string",
            "description": "Required if 'opening_day_tuesday' is true."
          },
          "opening_hours_wednesday": {
            "maximum": 50,
            "type": "string",
            "description": "Required if 'opening_day_wednesday' is true."
          },
          "opening_hours_thursday": {
            "maximum": 50,
            "type": "string",
            "description": "Required if 'opening_day_thursday' is true."
          },
          "opening_hours_friday": {
            "maximum": 50,
            "type": "string",
            "description": "Required if 'opening_day_friday' is true."
          },
          "opening_hours_saturday": {
            "maximum": 50,
            "type": "string",
            "description": "Required if 'opening_day_saturday' is true."
          },
          "opening_hours_sunday": {
            "maximum": 50,
            "type": "string",
            "description": "Required if 'opening_day_sunday' is true."
          }
        }
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "declaration1": {
            "type": "string",
            "description": "I declare that the information I have given on this form is correct and complete to the best of my knowledge and belief."
          },
          "declaration2": {
            "type": "string",
            "description": "The operator will notify their local council of any significant changes to the business activity, including closure, within 28 days of the change happening."
          },
          "declaration3": {
            "type": "string",
            "description": "The operator understands they are legally responsible for the safety and authenticity of the food being produced or served at this establishment."
          }
        }
      },
      "Collected": {
        "type": "object",
        "properties": {
          "collected": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "name": "Ocp-Apim-Subscription-Key",
        "in": "header"
      },
      "apiKeyQuery": {
        "type": "apiKey",
        "name": "subscription-key",
        "in": "query"
      }
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ]
}
